{"mappings":"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","sources":["<anon>","node_modules/.pnpm/three@0.160.1/node_modules/three/examples/jsm/libs/stats.module.js","examples/buildingAnimation.js"],"sourcesContent":["import \"./buildingAnimation.5423aa82.js\";\nimport \"./buildingAnimation.bd798f01.js\";\nimport \"./buildingAnimation.4b8d4fc8.js\";\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire1149\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire1149\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"82VHk\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $5dbb4439cfbde5f7$export$2e2bcd8739ae039);\nvar $5dbb4439cfbde5f7$var$Stats = function() {\n    var mode = 0;\n    var container = document.createElement('div');\n    container.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n    container.addEventListener('click', function(event) {\n        event.preventDefault();\n        showPanel(++mode % container.children.length);\n    }, false);\n    //\n    function addPanel(panel) {\n        container.appendChild(panel.dom);\n        return panel;\n    }\n    function showPanel(id) {\n        for(var i = 0; i < container.children.length; i++)container.children[i].style.display = i === id ? 'block' : 'none';\n        mode = id;\n    }\n    //\n    var beginTime = (performance || Date).now(), prevTime = beginTime, frames = 0;\n    var fpsPanel = addPanel(new $5dbb4439cfbde5f7$var$Stats.Panel('FPS', '#0ff', '#002'));\n    var msPanel = addPanel(new $5dbb4439cfbde5f7$var$Stats.Panel('MS', '#0f0', '#020'));\n    if (self.performance && self.performance.memory) var memPanel = addPanel(new $5dbb4439cfbde5f7$var$Stats.Panel('MB', '#f08', '#201'));\n    showPanel(0);\n    return {\n        REVISION: 16,\n        dom: container,\n        addPanel: addPanel,\n        showPanel: showPanel,\n        begin: function() {\n            beginTime = (performance || Date).now();\n        },\n        end: function() {\n            frames++;\n            var time = (performance || Date).now();\n            msPanel.update(time - beginTime, 200);\n            if (time >= prevTime + 1000) {\n                fpsPanel.update(frames * 1000 / (time - prevTime), 100);\n                prevTime = time;\n                frames = 0;\n                if (memPanel) {\n                    var memory = performance.memory;\n                    memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);\n                }\n            }\n            return time;\n        },\n        update: function() {\n            beginTime = this.end();\n        },\n        // Backwards Compatibility\n        domElement: container,\n        setMode: showPanel\n    };\n};\n$5dbb4439cfbde5f7$var$Stats.Panel = function(name, fg, bg) {\n    var min = Infinity, max = 0, round = Math.round;\n    var PR = round(window.devicePixelRatio || 1);\n    var WIDTH = 80 * PR, HEIGHT = 48 * PR, TEXT_X = 3 * PR, TEXT_Y = 2 * PR, GRAPH_X = 3 * PR, GRAPH_Y = 15 * PR, GRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n    var canvas = document.createElement('canvas');\n    canvas.width = WIDTH;\n    canvas.height = HEIGHT;\n    canvas.style.cssText = 'width:80px;height:48px';\n    var context = canvas.getContext('2d');\n    context.font = 'bold ' + 9 * PR + 'px Helvetica,Arial,sans-serif';\n    context.textBaseline = 'top';\n    context.fillStyle = bg;\n    context.fillRect(0, 0, WIDTH, HEIGHT);\n    context.fillStyle = fg;\n    context.fillText(name, TEXT_X, TEXT_Y);\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    context.fillStyle = bg;\n    context.globalAlpha = 0.9;\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    return {\n        dom: canvas,\n        update: function(value, maxValue) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n            context.fillStyle = bg;\n            context.globalAlpha = 1;\n            context.fillRect(0, 0, WIDTH, GRAPH_Y);\n            context.fillStyle = fg;\n            context.fillText(round(value) + ' ' + name + ' (' + round(min) + '-' + round(max) + ')', TEXT_X, TEXT_Y);\n            context.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);\n            context.fillStyle = bg;\n            context.globalAlpha = 0.9;\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value / maxValue) * GRAPH_HEIGHT));\n        }\n    };\n};\nvar $5dbb4439cfbde5f7$export$2e2bcd8739ae039 = $5dbb4439cfbde5f7$var$Stats;\n\n});\n\n\nvar $jw0R5 = parcelRequire(\"jw0R5\");\n\nvar $cPutt = parcelRequire(\"cPutt\");\n\nvar $ihXk0 = parcelRequire(\"ihXk0\");\n\nvar $2sw9m = parcelRequire(\"2sw9m\");\n\nvar $7DqNw = parcelRequire(\"7DqNw\");\n\nvar $82VHk = parcelRequire(\"82VHk\");\n\nvar $2Tb7o = parcelRequire(\"2Tb7o\");\nconst $5fa592588d508369$var$assetUrl = (0, $2Tb7o.getAssetURL)();\nconst $5fa592588d508369$var$modelUrl = $5fa592588d508369$var$assetUrl + \"models/floors.glb\";\nlet $5fa592588d508369$var$camera, $5fa592588d508369$var$scene, $5fa592588d508369$var$renderer, $5fa592588d508369$var$controls;\nlet $5fa592588d508369$var$clock, $5fa592588d508369$var$stats, $5fa592588d508369$var$gui;\n/* defines */ const $5fa592588d508369$var$BG_COLOR = 0x333333;\nconst $5fa592588d508369$var$FRAME_INTERVAL = 1 / 30;\n/* global variables */ let $5fa592588d508369$var$windwoWidth = window.innerWidth;\nlet $5fa592588d508369$var$windowHeight = window.innerHeight;\nconst $5fa592588d508369$var$dimension = {\n    center: new $jw0R5.Vector3(),\n    min: new $jw0R5.Vector3(),\n    max: new $jw0R5.Vector3()\n};\nlet $5fa592588d508369$var$dt = 0;\nlet $5fa592588d508369$var$floorNumbers = [];\nlet $5fa592588d508369$var$floorsStatus = \"normal\";\nlet $5fa592588d508369$var$floors = [];\nlet $5fa592588d508369$var$isAnimating = false;\n// set a big enough number than actual floors count\nlet $5fa592588d508369$var$lastFloorNumber = 100;\nlet $5fa592588d508369$var$animationId = -1;\n/* control params  */ const $5fa592588d508369$var$params = {\n    reset: $5fa592588d508369$var$reset,\n    distance: 1000,\n    scale: 0.02,\n    easingName: 'Linear',\n    easingType: 'In'\n};\n/* easing functions */ const $5fa592588d508369$var$easingNames = [];\nfor(let e in $cPutt.Easing)if (e == 'generatePow') $5fa592588d508369$var$easingNames.push('generatePow');\nelse $5fa592588d508369$var$easingNames.push(e);\n$5fa592588d508369$var$init();\n$5fa592588d508369$var$render();\nfunction $5fa592588d508369$var$init() {\n    $5fa592588d508369$var$renderer = new $jw0R5.WebGLRenderer({\n        antialias: true\n    });\n    $5fa592588d508369$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $5fa592588d508369$var$renderer.setSize($5fa592588d508369$var$windwoWidth, $5fa592588d508369$var$windowHeight);\n    $5fa592588d508369$var$renderer.setClearColor($5fa592588d508369$var$BG_COLOR, 1);\n    $5fa592588d508369$var$renderer.shadowMap.enabled = true;\n    $5fa592588d508369$var$renderer.shadowMap.type = $jw0R5.PCFSoftShadowMap;\n    document.body.appendChild($5fa592588d508369$var$renderer.domElement);\n    $5fa592588d508369$var$scene = new $jw0R5.Scene();\n    $5fa592588d508369$var$scene.add(new $jw0R5.AmbientLight(0xf0f0f0, 3));\n    $5fa592588d508369$var$camera = new $jw0R5.PerspectiveCamera(70, $5fa592588d508369$var$windwoWidth / $5fa592588d508369$var$windowHeight, 1, 10000);\n    $5fa592588d508369$var$scene.add($5fa592588d508369$var$camera);\n    $5fa592588d508369$var$controls = new (0, $2sw9m.OrbitControls)($5fa592588d508369$var$camera, $5fa592588d508369$var$renderer.domElement);\n    $5fa592588d508369$var$clock = new $jw0R5.Clock();\n    $5fa592588d508369$var$stats = new (0, $82VHk.default)();\n    document.body.appendChild($5fa592588d508369$var$stats.dom);\n    new (0, $ihXk0.GLTFLoader)().load($5fa592588d508369$var$modelUrl, function(gltf) {\n        let model = gltf.scene;\n        $5fa592588d508369$var$floors = model.children;\n        // mark each floor's status\n        $5fa592588d508369$var$floors.map((floor)=>{\n            const number = floor.userData.name.split(\".\")[1];\n            $5fa592588d508369$var$floorNumbers.push(Number(number));\n            floor.userData.originY = floor.position.y;\n            floor.userData.status = \"normal\";\n            floor.userData.progress = 0;\n        });\n        window.model = model;\n        $5fa592588d508369$var$gui = new (0, $7DqNw.GUI)();\n        $5fa592588d508369$var$gui.add($5fa592588d508369$var$params, 'reset');\n        $5fa592588d508369$var$gui.add($5fa592588d508369$var$params, 'easingName', $5fa592588d508369$var$easingNames);\n        $5fa592588d508369$var$gui.add($5fa592588d508369$var$params, 'easingType', [\n            'In',\n            'InOut',\n            'Out'\n        ]);\n        $5fa592588d508369$var$gui.add({\n            level: $5fa592588d508369$var$floorNumbers[0]\n        }, 'level', $5fa592588d508369$var$floorNumbers[0], $5fa592588d508369$var$floorNumbers[$5fa592588d508369$var$floorNumbers.length - 1]).step(1).onChange((v)=>{\n            // no new animation will be initiated when one animation is active\n            if ($5fa592588d508369$var$isAnimating) {\n                console.log(\"Floors is animating!\");\n                return;\n            }\n            $5fa592588d508369$var$toggleFloor($5fa592588d508369$var$floors, v);\n        });\n        model.traverse((object)=>{\n            window.floors = $5fa592588d508369$var$floors;\n            // mesh cast and receive shadow\n            if (object.isMesh) {\n                object.castShadow = true;\n                object.receiveShadow = true;\n            }\n        });\n        $5fa592588d508369$var$scene.add(model);\n        const box = new $jw0R5.Box3();\n        box.setFromObject(model);\n        const size = box.getSize(new $jw0R5.Vector3());\n        const target = new $jw0R5.Vector3();\n        const center = box.getCenter(target);\n        $5fa592588d508369$var$controls.target = target;\n        $5fa592588d508369$var$dimension.min = box.min;\n        $5fa592588d508369$var$dimension.max = box.max;\n        $5fa592588d508369$var$dimension.center = center;\n        $5fa592588d508369$var$dimension.size = size;\n        $5fa592588d508369$var$camera.position.x = center.x + 1.2 * size.x;\n        $5fa592588d508369$var$camera.position.y = center.y + 1 * size.y;\n        $5fa592588d508369$var$camera.position.z = center.z + 1.2 * size.z;\n        $5fa592588d508369$var$camera.updateProjectionMatrix();\n        $5fa592588d508369$var$controls.update();\n        // illuminate the scene for better view\n        const light = new $jw0R5.SpotLight(0xf0f0f0, 2);\n        light.position.copy($5fa592588d508369$var$camera.position);\n        light.position.y += 2 * size.y;\n        light.castShadow = true;\n        light.lookAt(target.x, target.y, target.z);\n        light.fov = 30;\n        light.decay = 0.1;\n        light.shadow.mapSize.setScalar(1024);\n        light.shadow.bias = -0.000001;\n        light.shadow.radius = 5;\n        const shadowCam = light.shadow.camera;\n        shadowCam.near = 1;\n        shadowCam.far = 10000;\n        shadowCam.left = shadowCam.bottom = -10;\n        shadowCam.right = shadowCam.top = 10;\n        $5fa592588d508369$var$scene.add(light);\n        window.addEventListener('resize', (e)=>{\n            $5fa592588d508369$var$windwoWidth = window.innerWidth;\n            $5fa592588d508369$var$windowHeight = window.innerHeight;\n            $5fa592588d508369$var$camera.aspect = $5fa592588d508369$var$windwoWidth / $5fa592588d508369$var$windowHeight;\n            $5fa592588d508369$var$camera.updateProjectionMatrix();\n            $5fa592588d508369$var$renderer.setSize($5fa592588d508369$var$windwoWidth, $5fa592588d508369$var$windowHeight);\n        });\n    }, function(xhr) {\n    // console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n    }, function(error) {\n        console.log(error);\n    });\n}\nfunction $5fa592588d508369$var$render() {\n    requestAnimationFrame($5fa592588d508369$var$render);\n    let time = $5fa592588d508369$var$clock.getDelta();\n    const delta = Math.min(time, $5fa592588d508369$var$FRAME_INTERVAL);\n    $5fa592588d508369$var$dt += time;\n    if ($5fa592588d508369$var$dt > $5fa592588d508369$var$FRAME_INTERVAL) {\n        $5fa592588d508369$var$stats.update();\n        $5fa592588d508369$var$renderer.render($5fa592588d508369$var$scene, $5fa592588d508369$var$camera);\n        $5fa592588d508369$var$dt %= $5fa592588d508369$var$FRAME_INTERVAL;\n    }\n}\n/* utils - floor motion control */ function $5fa592588d508369$var$toggleFloor(floors, floorNumber) {\n    // if all floor's status is normal , reset status\n    if (floors.every((floor)=>{\n        return floor.userData.status == \"normal\";\n    })) $5fa592588d508369$var$reset();\n    $5fa592588d508369$var$isAnimating = true;\n    let floorIndex = $5fa592588d508369$var$floorNumbers.indexOf(floorNumber);\n    let floorGroup = floors[floorIndex];\n    // initial status\n    if ($5fa592588d508369$var$floorsStatus == \"normal\") {\n        let groups = selectGroups(floorIndex, \"up\");\n        if (groups.length > 0) {\n            $5fa592588d508369$var$floorsStatus = \"expanded\";\n            floorAnimate(groups, \"up\");\n        }\n    } else if ($5fa592588d508369$var$floorsStatus == \"expanded\") {\n        if (floorNumber < $5fa592588d508369$var$lastFloorNumber) {\n            let groups = selectGroups(floorIndex, \"up\");\n            floorAnimate(groups, \"up\");\n        } else {\n            let groups = selectGroups(floorIndex, \"down\");\n            floorAnimate(groups, \"down\");\n        }\n    }\n    $5fa592588d508369$var$lastFloorNumber = floorIndex;\n    // animation of certain floor\n    function floorAnimate(floorGroups, direction) {\n        // set status to ensure precision\n        floorGroups.forEach((floor)=>{\n            floor.userData.progress = 0;\n        });\n        animate();\n        function setEndAnimation(groups) {\n            if (groups.every((floor)=>{\n                return floor.userData.progress == 1;\n            })) $5fa592588d508369$var$isAnimating = false;\n        }\n        function animate() {\n            const length = floorGroups.length;\n            if (direction == \"up\") floorGroups.forEach((floor, index)=>{\n                const { easingName: easingName, easingType: easingType, distance: distance, scale: scale } = $5fa592588d508369$var$params;\n                const { progress: progress, originY: originY } = floor.userData;\n                floor.userData.progress += scale * (0.4 + 2 * (index + 1) / length);\n                let easingFunc = $cPutt.Easing[easingName];\n                if (easingName == 'generatePow') easingFunc = easingFunc();\n                const delta = easingFunc[easingType](progress);\n                const y = originY + distance * delta;\n                floor.position.y = y;\n                if (floor.userData.progress >= 1) {\n                    floor.userData.progress = 1;\n                    floor.position.y = originY + distance;\n                    floor.userData.status = \"rised\";\n                    // take effect if all floors animations completed\n                    setEndAnimation(floorGroups);\n                }\n            });\n            else if (direction == \"down\") floorGroups.forEach((floor, index)=>{\n                const { easingName: easingName, easingType: easingType, scale: scale, distance: distance } = $5fa592588d508369$var$params;\n                const { progress: progress, originY: originY } = floor.userData;\n                floor.userData.progress += scale * (0.4 + 2 * (length - index) / length);\n                let easingFunc = $cPutt.Easing[easingName];\n                if (easingName == 'generatePow') easingFunc = easingFunc();\n                const delta = easingFunc[easingType](progress);\n                const y = originY + distance * (1 - delta);\n                floor.position.y = y;\n                if (floor.userData.progress >= 1) {\n                    floor.userData.progress = 1;\n                    floor.position.y = originY;\n                    floor.userData.status = \"normal\";\n                    // take effect if all floors animations completed\n                    setEndAnimation(floorGroups);\n                }\n            });\n            if ($5fa592588d508369$var$isAnimating) $5fa592588d508369$var$animationId = requestAnimationFrame(animate);\n            else cancelAnimationFrame($5fa592588d508369$var$animationId);\n        }\n    }\n    // select floors need to animate\n    function selectGroups(floorIndex, direction) {\n        if (direction == \"up\") return floors.filter((floor, index)=>{\n            return floor.userData.status == \"normal\" && index > floorIndex;\n        });\n        else if (direction == \"down\") return floors.filter((floor, index)=>{\n            return floor.userData.status == \"rised\" && index <= floorIndex;\n        });\n    }\n}\n/* utils - floor status reset */ function $5fa592588d508369$var$reset(groups = $5fa592588d508369$var$floors) {\n    $5fa592588d508369$var$isAnimating = false;\n    $5fa592588d508369$var$floorsStatus = \"normal\";\n    groups.map((floor, index)=>{\n        floor.position.y = floor.userData.originY;\n        floor.userData.status = \"normal\";\n        floor.userData.progress = 0;\n    });\n}\n\n\n//# sourceMappingURL=buildingAnimation.5fa1c8bb.js.map\n","var Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport default Stats;\n","import * as THREE from 'three';\nimport * as TWEEN from '@tweenjs/tween.js/dist/tween.esm.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n\nimport { getAssetURL } from '/extend/tools/index.js'\n\nconst assetUrl = getAssetURL();\nconst modelUrl = assetUrl + \"models/floors.glb\"\n\nlet camera, scene, renderer, controls;\nlet clock, stats, gui;\n\n/* defines */\nconst BG_COLOR = 0x333333;\nconst FRAME_INTERVAL = 1 / 30;\n\n/* global variables */\nlet windwoWidth = window.innerWidth;\nlet windowHeight = window.innerHeight;\nconst dimension = {\n    center: new THREE.Vector3(),\n    min: new THREE.Vector3(),\n    max: new THREE.Vector3()\n};\nlet dt = 0;\n\nlet floorNumbers = [];\nlet floorsStatus = \"normal\";\nlet floors = [];\nlet isAnimating = false;\n// set a big enough number than actual floors count\nlet lastFloorNumber = 100;\nlet animationId = -1;\n\n/* control params  */\nconst params = {\n    reset: reset,\n    distance: 1000,\n    scale: 0.02,\n    easingName: 'Linear',\n    easingType: 'In',\n};\n\n/* easing functions */\nconst easingNames = [];\nfor (let e in TWEEN.Easing) {\n\n    if (e == 'generatePow') {\n\n        easingNames.push('generatePow');\n\n    } else {\n\n        easingNames.push(e);\n\n    }\n}\n\n\ninit();\nrender();\n\nfunction init() {\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(windwoWidth, windowHeight);\n    renderer.setClearColor(BG_COLOR, 1);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    document.body.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    scene.add(new THREE.AmbientLight(0xf0f0f0, 3));\n\n    camera = new THREE.PerspectiveCamera(70, windwoWidth / windowHeight, 1, 10000);\n    scene.add(camera);\n\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    clock = new THREE.Clock();\n    stats = new Stats();\n    document.body.appendChild(stats.dom);\n\n    new GLTFLoader().load(modelUrl,\n\n        function (gltf) {\n            let model = gltf.scene;\n            floors = model.children;\n\n            // mark each floor's status\n            floors.map(floor => {\n                const number = floor.userData.name.split(\".\")[1];\n                floorNumbers.push(Number(number));\n                floor.userData.originY = floor.position.y;\n                floor.userData.status = \"normal\";\n                floor.userData.progress = 0;\n            });\n\n            window.model = model;\n\n            /* GUI */\n            {\n                gui = new GUI();\n\n                gui.add(params, 'reset');\n                gui.add(params, 'easingName', easingNames);\n                gui.add(params, 'easingType', ['In', 'InOut', 'Out']);\n\n                gui.add({\n                    level: floorNumbers[0]\n                }, 'level', floorNumbers[0], floorNumbers[floorNumbers.length - 1])\n                    .step(1).onChange(v => {\n\n                        // no new animation will be initiated when one animation is active\n                        if (isAnimating) {\n                            console.log(\"Floors is animating!\");\n                            return;\n                        }\n\n                        toggleFloor(floors, v);\n                    });\n            }\n\n\n\n            model.traverse(object => {\n                window.floors = floors;\n\n                // mesh cast and receive shadow\n                if (object.isMesh) {\n                    object.castShadow = true;\n                    object.receiveShadow = true;\n                }\n\n            });\n\n            scene.add(model);\n\n            const box = new THREE.Box3();\n            box.setFromObject(model);\n            const size = box.getSize(new THREE.Vector3());\n            const target = new THREE.Vector3();\n            const center = box.getCenter(target);\n            controls.target = target;\n\n            dimension.min = box.min;\n            dimension.max = box.max;\n            dimension.center = center;\n            dimension.size = size;\n\n            camera.position.x = center.x + 1.2 * size.x;\n            camera.position.y = center.y + 1 * size.y;\n            camera.position.z = center.z + 1.2 * size.z;\n\n\n            camera.updateProjectionMatrix();\n            controls.update();\n\n            // illuminate the scene for better view\n            const light = new THREE.SpotLight(0xf0f0f0, 2);\n            light.position.copy(camera.position);\n            light.position.y += 2 * size.y;\n            light.castShadow = true;\n\n            light.lookAt(target.x, target.y, target.z);\n            light.fov = 30;\n            light.decay = 0.1;\n            light.shadow.mapSize.setScalar(1024);\n            light.shadow.bias = -1e-6;\n            light.shadow.radius = 5;\n\n            const shadowCam = light.shadow.camera;\n            shadowCam.near = 1;\n            shadowCam.far = 10000;\n            shadowCam.left = shadowCam.bottom = -10;\n            shadowCam.right = shadowCam.top = 10;\n            scene.add(light);\n\n            /* events */\n            {\n                window.addEventListener('resize', e => {\n\n                    windwoWidth = window.innerWidth;\n                    windowHeight = window.innerHeight;\n                    camera.aspect = windwoWidth / windowHeight;\n                    camera.updateProjectionMatrix();\n\n                    renderer.setSize(windwoWidth, windowHeight);\n                });\n            }\n\n\n        },\n        function (xhr) {\n            // console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n        },\n        function (error) {\n            console.log(error);\n        });\n}\n\nfunction render() {\n    requestAnimationFrame(render);\n\n    let time = clock.getDelta();\n    const delta = Math.min(time, FRAME_INTERVAL);\n\n    dt += time;\n    if (dt > FRAME_INTERVAL) {\n\n        stats.update();\n        renderer.render(scene, camera);\n\n        dt %= FRAME_INTERVAL;\n    }\n}\n\n/* utils - floor motion control */\nfunction toggleFloor(floors, floorNumber) {\n\n    // if all floor's status is normal , reset status\n    if (\n        floors.every(floor => {\n            return floor.userData.status == \"normal\";\n        })\n    ) {\n        reset();\n    }\n\n    isAnimating = true;\n\n    let floorIndex = floorNumbers.indexOf(floorNumber);\n    let floorGroup = floors[floorIndex];\n\n    // initial status\n    if (floorsStatus == \"normal\") {\n        let groups = selectGroups(floorIndex, \"up\");\n        if (groups.length > 0) {\n            floorsStatus = \"expanded\";\n            floorAnimate(groups, \"up\");\n        }\n    }\n\n    else if (floorsStatus == \"expanded\") {\n\n        if (floorNumber < lastFloorNumber) {\n            let groups = selectGroups(floorIndex, \"up\");\n            floorAnimate(groups, \"up\");\n        }\n        else {\n            let groups = selectGroups(floorIndex, \"down\");\n            floorAnimate(groups, \"down\");\n        }\n\n    }\n\n    lastFloorNumber = floorIndex;\n\n    // animation of certain floor\n    function floorAnimate(floorGroups, direction) {\n\n        // set status to ensure precision\n        floorGroups.forEach(floor => {\n            floor.userData.progress = 0;\n        });\n\n        animate();\n\n        function setEndAnimation(groups) {\n\n            if (\n                groups.every(floor => {\n                    return floor.userData.progress == 1;\n                })\n            ) {\n\n                isAnimating = false;\n\n            }\n\n        }\n\n        function animate() {\n\n            const length = floorGroups.length;\n\n            if (direction == \"up\") {\n\n                floorGroups.forEach((floor, index) => {\n\n                    const { easingName, easingType, distance, scale } = params;\n                    const { progress, originY } = floor.userData;\n                    floor.userData.progress += scale * (0.4 + 2 * (index + 1) / length);\n\n                    let easingFunc = TWEEN.Easing[easingName];\n                    if (easingName == 'generatePow') {\n                        easingFunc = easingFunc();\n                    }\n                    const delta = easingFunc[easingType](progress);\n\n                    const y = originY + distance * delta;\n                    floor.position.y = y;\n\n                    if (floor.userData.progress >= 1) {\n\n                        floor.userData.progress = 1;\n                        floor.position.y = originY + distance;\n                        floor.userData.status = \"rised\";\n                        // take effect if all floors animations completed\n                        setEndAnimation(floorGroups);\n                    }\n\n                });\n\n            }\n\n            else if (direction == \"down\") {\n\n                floorGroups.forEach((floor, index) => {\n\n                    const { easingName, easingType, scale, distance } = params;\n                    const { progress, originY } = floor.userData;\n                    floor.userData.progress += scale * (0.4 + 2 * (length - index) / length);\n\n                    let easingFunc = TWEEN.Easing[easingName];\n                    if (easingName == 'generatePow') {\n                        easingFunc = easingFunc();\n                    }\n                    const delta = easingFunc[easingType](progress);\n\n                    const y = originY + distance * (1 - delta);\n                    floor.position.y = y;\n                    if (floor.userData.progress >= 1) {\n\n                        floor.userData.progress = 1;\n                        floor.position.y = originY;\n                        floor.userData.status = \"normal\";\n                        // take effect if all floors animations completed\n                        setEndAnimation(floorGroups);\n\n                    }\n\n                });\n\n            }\n\n            if (isAnimating) {\n\n                animationId = requestAnimationFrame(animate);\n\n            } else {\n\n                cancelAnimationFrame(animationId);\n\n            }\n\n        }\n\n    }\n\n    // select floors need to animate\n    function selectGroups(floorIndex, direction) {\n\n        if (direction == \"up\") {\n\n            return floors.filter((floor, index) => {\n                return floor.userData.status == \"normal\" && index > floorIndex;\n            });\n\n        } else if (direction == \"down\") {\n\n            return floors.filter((floor, index) => {\n                return floor.userData.status == \"rised\" && index <= floorIndex;\n            });\n\n        }\n\n    }\n\n}\n\n/* utils - floor status reset */\nfunction reset(groups = floors) {\n\n    isAnimating = false;\n    floorsStatus = \"normal\";\n\n    groups.map((floor, index) => {\n\n        floor.position.y = floor.userData.originY;\n        floor.userData.status = \"normal\";\n        floor.userData.progress = 0;\n\n    });\n\n}"],"names":["$5fa592588d508369$var$camera","$5fa592588d508369$var$scene","$5fa592588d508369$var$renderer","$5fa592588d508369$var$controls","$5fa592588d508369$var$clock","$5fa592588d508369$var$stats","$5fa592588d508369$var$gui","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$5dbb4439cfbde5f7$export$2e2bcd8739ae039","set","s","enumerable","configurable","$5dbb4439cfbde5f7$var$Stats","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","i","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","$jw0R5","$cPutt","$ihXk0","$2sw9m","$7DqNw","$82VHk","$5fa592588d508369$var$modelUrl","$5fa592588d508369$var$assetUrl","$2Tb7o","getAssetURL","$5fa592588d508369$var$FRAME_INTERVAL","$5fa592588d508369$var$windwoWidth","innerWidth","$5fa592588d508369$var$windowHeight","innerHeight","$5fa592588d508369$var$dimension","center","Vector3","$5fa592588d508369$var$dt","$5fa592588d508369$var$floorNumbers","$5fa592588d508369$var$floorsStatus","$5fa592588d508369$var$floors","$5fa592588d508369$var$isAnimating","$5fa592588d508369$var$lastFloorNumber","$5fa592588d508369$var$animationId","$5fa592588d508369$var$params","reset","$5fa592588d508369$var$reset","distance","scale","easingName","easingType","$5fa592588d508369$var$easingNames","e","Easing","push","groups","map","floor","index","position","y","userData","originY","status","progress","WebGLRenderer","antialias","setPixelRatio","setSize","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","body","Scene","add","AmbientLight","PerspectiveCamera","OrbitControls","Clock","default","GLTFLoader","load","gltf","model","scene","number","split","Number","GUI","level","step","onChange","v","console","log","$5fa592588d508369$var$toggleFloor","floors","floorNumber","every","floorIndex","indexOf","selectGroups","floorAnimate","floorGroups","direction","setEndAnimation","forEach","animate","easingFunc","delta","requestAnimationFrame","cancelAnimationFrame","filter","traverse","object","isMesh","castShadow","receiveShadow","box","Box3","setFromObject","size","getSize","target","getCenter","x","z","updateProjectionMatrix","light","SpotLight","copy","lookAt","fov","decay","shadow","mapSize","setScalar","bias","radius","shadowCam","camera","near","far","left","bottom","right","top","aspect","xhr","error","$5fa592588d508369$var$render","getDelta","render"],"version":3,"file":"buildingAnimation.5fa1c8bb.js.map"}